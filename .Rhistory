library(dplyr)
gs4_deauth()
d <- read_sheet("https://docs.google.com/spreadsheets/d/1C03QNEp_foGSRXncI68DKEpIC1NqLDhv1TffH3hQCA8/edit?usp=sharing", sheet = "draft1")
# Function for conditional text transformation
conditional_transform_fn <- function(icon_name) {
function(x) {
ifelse(is.na(x) | x == "", "",
ifelse(grepl("FUTURE", x), fontawesome::fa(icon_name, fill_opacity = 0.25),
glue::glue("<a href = {'http://ps52007d.littlemonkeylab.com'}{x}{'.html'}>{fontawesome::fa(icon_name)}</a>")
)
)
}
}
# Main Code
d |>
mutate(
week = ifelse(is.na(week), "", week),
date = ifelse(
is.na(date) | date == "",
"",
{
temp_date <- as.Date(date, format="%m/%d/%Y")
paste0(wday(temp_date, label = TRUE, abbr = FALSE), ", ", format(temp_date, "%d %B"))
}
)
) |>
gt() |>
text_transform(cells_body(columns = c(overview)), fn = conditional_transform_fn("binoculars")) |>
text_transform(cells_body(columns = c(lecture)), fn = conditional_transform_fn("tv")) |>
text_transform(cells_body(columns = c(lab)), fn = conditional_transform_fn("users")) |>
text_transform(cells_body(columns = c(worksheets)), fn = conditional_transform_fn("pencil-ruler")) |>
text_transform(cells_body(columns = c(DangerZone)), fn = conditional_transform_fn("book")) |>
sub_missing(columns = c(date, topic, notes), missing_text = "") |>
cols_align(align = "center", columns = c(week, date, overview, lecture, lab, worksheets, DangerZone)) |>
cols_align(align = "left", columns = c(topic, notes)) |>
tab_style(
style = cell_borders(
sides = "right",
color = "#D3D3D3",
style = "solid"
),
locations = cells_body(
columns = c(week, date, topic, overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting text size for 'notes' column
tab_style(
style = htmltools::css(font_size = "0.9em"),
locations = cells_body(
columns = c(notes)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "5%"),
locations = cells_body(
columns = c(overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "10%"),
locations = cells_body(
columns = c(week, date)
)
) |>
tab_style(
style = htmltools::css(font_size = "0.75em"),
locations = cells_body(
columns = everything()
)
) |>
fmt_markdown(columns = topic)
library(quarto)
library(quarto)
renv::snapshot(confirm = FALSE)
# Function for conditional text transformation
conditional_transform_fn <- function(icon_name) {
function(x) {
ifelse(is.na(x) | x == "", "",
ifelse(grepl("FUTURE", x), fontawesome::fa(icon_name, fill_opacity = 0.25),
glue::glue("<a href = {'http://ps52007d.littlemonkeylab.com'}{x}{'.html'}>{fontawesome::fa(icon_name)}</a>")
)
)
}
}
# Main Code
d |>
mutate(
week = ifelse(is.na(week), "", week),
date = ifelse(
is.na(date) | date == "",
"",
{
temp_date <- as.Date(date, format="%m/%d/%Y")
paste0(wday(temp_date, label = TRUE, abbr = FALSE), ", ", format(temp_date, "%d %B"))
}
)
) |>
gt() |>
text_transform(cells_body(columns = c(overview)), fn = conditional_transform_fn("binoculars")) |>
text_transform(cells_body(columns = c(lecture)), fn = conditional_transform_fn("tv")) |>
text_transform(cells_body(columns = c(lab)), fn = conditional_transform_fn("users")) |>
text_transform(cells_body(columns = c(worksheets)), fn = conditional_transform_fn("pencil-ruler")) |>
text_transform(cells_body(columns = c(DangerZone)), fn = conditional_transform_fn("book")) |>
sub_missing(columns = c(date, topic, notes), missing_text = "") |>
cols_align(align = "center", columns = c(week, date, overview, lecture, lab, worksheets, DangerZone)) |>
cols_align(align = "left", columns = c(topic, notes)) |>
tab_style(
style = cell_borders(
sides = "right",
color = "#D3D3D3",
style = "solid"
),
locations = cells_body(
columns = c(week, date, topic, overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting text size for 'notes' column
tab_style(
style = htmltools::css(font_size = "0.9em"),
locations = cells_body(
columns = c(notes)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "5%"),
locations = cells_body(
columns = c(overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "10%"),
locations = cells_body(
columns = c(week, date)
)
) |>
tab_style(
style = htmltools::css(font_size = "0.75em"),
locations = cells_body(
columns = everything()
)
) |>
fmt_markdown(columns = topic)
library(googlesheets4)
library(gt)
library(tidyverse)
library(lubridate)
library(dplyr)
gs4_deauth()
d <- read_sheet("https://docs.google.com/spreadsheets/d/1C03QNEp_foGSRXncI68DKEpIC1NqLDhv1TffH3hQCA8/edit?usp=sharing", sheet = "draft1")
# Function for conditional text transformation
conditional_transform_fn <- function(icon_name) {
function(x) {
ifelse(is.na(x) | x == "", "",
ifelse(grepl("FUTURE", x), fontawesome::fa(icon_name, fill_opacity = 0.25),
glue::glue("<a href = {'http://ps52007d.littlemonkeylab.com'}{x}{'.html'}>{fontawesome::fa(icon_name)}</a>")
)
)
}
}
# Main Code
d |>
mutate(
week = ifelse(is.na(week), "", week),
date = ifelse(
is.na(date) | date == "",
"",
{
temp_date <- as.Date(date, format="%m/%d/%Y")
paste0(wday(temp_date, label = TRUE, abbr = FALSE), ", ", format(temp_date, "%d %B"))
}
)
) |>
gt() |>
text_transform(cells_body(columns = c(overview)), fn = conditional_transform_fn("binoculars")) |>
text_transform(cells_body(columns = c(lecture)), fn = conditional_transform_fn("tv")) |>
text_transform(cells_body(columns = c(lab)), fn = conditional_transform_fn("users")) |>
text_transform(cells_body(columns = c(worksheets)), fn = conditional_transform_fn("pencil-ruler")) |>
text_transform(cells_body(columns = c(DangerZone)), fn = conditional_transform_fn("book")) |>
sub_missing(columns = c(date, topic, notes), missing_text = "") |>
cols_align(align = "center", columns = c(week, date, overview, lecture, lab, worksheets, DangerZone)) |>
cols_align(align = "left", columns = c(topic, notes)) |>
tab_style(
style = cell_borders(
sides = "right",
color = "#D3D3D3",
style = "solid"
),
locations = cells_body(
columns = c(week, date, topic, overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting text size for 'notes' column
tab_style(
style = htmltools::css(font_size = "0.9em"),
locations = cells_body(
columns = c(notes)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "5%"),
locations = cells_body(
columns = c(overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "10%"),
locations = cells_body(
columns = c(week, date)
)
) |>
tab_style(
style = htmltools::css(font_size = "0.75em"),
locations = cells_body(
columns = everything()
)
) |>
fmt_markdown(columns = topic)
library(googlesheets4)
library(gt)
library(tidyverse)
library(lubridate)
library(dplyr)
gs4_deauth()
d <- read_sheet("https://docs.google.com/spreadsheets/d/1C03QNEp_foGSRXncI68DKEpIC1NqLDhv1TffH3hQCA8/edit?usp=sharing", sheet = "draft1")
# Function for conditional text transformation
conditional_transform_fn <- function(icon_name) {
function(x) {
ifelse(is.na(x) | x == "", "",
ifelse(grepl("FUTURE", x), fontawesome::fa(icon_name, fill_opacity = 0.25),
glue::glue("<a href = {'http://ps52007d.littlemonkeylab.com'}{x}{'.html'}>{fontawesome::fa(icon_name)}</a>")
)
)
}
}
# Main Code
d |>
mutate(
week = ifelse(is.na(week), "", week),
date = ifelse(
is.na(date) | date == "",
"",
{
temp_date <- as.Date(date, format="%m/%d/%Y")
paste0(wday(temp_date, label = TRUE, abbr = FALSE), ", ", format(temp_date, "%d %B"))
}
)
) |>
gt() |>
text_transform(cells_body(columns = c(overview)), fn = conditional_transform_fn("binoculars")) |>
text_transform(cells_body(columns = c(lecture)), fn = conditional_transform_fn("tv")) |>
text_transform(cells_body(columns = c(lab)), fn = conditional_transform_fn("users")) |>
text_transform(cells_body(columns = c(worksheets)), fn = conditional_transform_fn("pencil-ruler")) |>
text_transform(cells_body(columns = c(DangerZone)), fn = conditional_transform_fn("book")) |>
sub_missing(columns = c(date, topic, notes), missing_text = "") |>
cols_align(align = "center", columns = c(week, date, overview, lecture, lab, worksheets, DangerZone)) |>
cols_align(align = "left", columns = c(topic, notes)) |>
tab_style(
style = cell_borders(
sides = "right",
color = "#D3D3D3",
style = "solid"
),
locations = cells_body(
columns = c(week, date, topic, overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting text size for 'notes' column
tab_style(
style = htmltools::css(font_size = "0.9em"),
locations = cells_body(
columns = c(notes)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "5%"),
locations = cells_body(
columns = c(overview, lecture, lab, worksheets, DangerZone)
)
) |>
# Setting column widths for specified columns
tab_style(
style = htmltools::css(width = "10%"),
locations = cells_body(
columns = c(week, date)
)
) |>
tab_style(
style = htmltools::css(font_size = "0.75em"),
locations = cells_body(
columns = everything()
)
) |>
fmt_markdown(columns = topic)
quarto render
renv::restore(confirm = FALSE)
remove.packages("MASS", lib="~/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4")
renv::restore(confirm = FALSE)
library(MASS, lib.loc = "/Users/gordonwright/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4")
library(MASS, lib.loc = "/Users/gordonwright/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4")
renv::restore(confirm = FALSE)
remove.packages("MASS", lib="~/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4")
remove.packages("MASS", lib="~/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4")
detach("package:MASS", unload = TRUE)
remove.packages("MASS", lib="~/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/x86_64-apple-darwin20/b06620f4")
renv::restore(confirm = FALSE)
renv::restore(confirm = FALSE)
install.packages("magick")
renv::restore(confirm = FALSE)
library(magick)
renv::restore(confirm = FALSE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/slides/week01")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/Week01")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/Week06")
# Load the required library
if (!requireNamespace("renderthis", quietly = TRUE)) {
install.packages("renderthis")
}
library(renderthis)
# List all '.slides.html' files in the '_site/slides/' directory
slide_files <- list.files(path = "_site/content", pattern = "\\.slides\\.html$", recursive = TRUE, full.names = TRUE)
# Exclude 'index.slides.html'
slide_files <- slide_files[!grepl("index\\.slides\\.html$", slide_files)]
# Print for debugging
print(paste("Slide Files found: ", length(slide_files)))
# Check if any '.slides.html' files are found
if (length(slide_files) == 0) {
print("No '.slides.html' files found.")
} else {
# Loop through each '.slides.html' file and convert it to PDF
for (slide_path in slide_files) {
# Print for debugging
print(paste("Processing: ", slide_path))
# Generate the PDF file name (same name as the HTML file but with a .pdf extension)
path_sans_ext <- sub("\\.slides\\.html$", "", slide_path)
path_sans_int <- sub("\\_site\\/", "", path_sans_ext)
pdf_path <- paste0(path_sans_ext, ".pdf")
png_path <- paste0(path_sans_int, ".png")
# Set the 'complex' flag based on your requirements (TRUE or FALSE)
complex <- FALSE
# Convert the slide to PDF
renderthis::to_pdf(slide_path, to = pdf_path, complex_slides = complex)
# Print a message indicating the PDF has been generated
print(paste("PDF generated:", pdf_path))
# Produce Preview image as png
renderthis::to_png(slide_path, to = png_path, keep_intermediates = TRUE)
}
}
# List all '.slides.html' files in the '_site/slides/' directory
slide_files <- list.files(path = "_site/content/Week06", pattern = "\\.slides\\.html$", recursive = TRUE, full.names = TRUE)
# Exclude 'index.slides.html'
slide_files <- slide_files[!grepl("index\\.slides\\.html$", slide_files)]
# Print for debugging
print(paste("Slide Files found: ", length(slide_files)))
# Check if any '.slides.html' files are found
if (length(slide_files) == 0) {
print("No '.slides.html' files found.")
} else {
# Loop through each '.slides.html' file and convert it to PDF
for (slide_path in slide_files) {
# Print for debugging
print(paste("Processing: ", slide_path))
# Generate the PDF file name (same name as the HTML file but with a .pdf extension)
path_sans_ext <- sub("\\.slides\\.html$", "", slide_path)
path_sans_int <- sub("\\_site\\/", "", path_sans_ext)
pdf_path <- paste0(path_sans_ext, ".pdf")
png_path <- paste0(path_sans_int, ".png")
# Set the 'complex' flag based on your requirements (TRUE or FALSE)
complex <- FALSE
# Convert the slide to PDF
renderthis::to_pdf(slide_path, to = pdf_path, complex_slides = complex)
# Print a message indicating the PDF has been generated
print(paste("PDF generated:", pdf_path))
# Produce Preview image as png
renderthis::to_png(slide_path, to = png_path, keep_intermediates = TRUE)
}
}
# Load the required library
if (!requireNamespace("renderthis", quietly = TRUE)) {
install.packages("renderthis")
}
library(renderthis)
# List all '.slides.html' files in the '_site/slides/' directory
slide_files <- list.files(path = "_site/content/Week06/", pattern = "\\.slides\\.html$", recursive = TRUE, full.names = TRUE)
# Exclude 'index.slides.html'
slide_files <- slide_files[!grepl("index\\.slides\\.html$", slide_files)]
# Print for debugging
print(paste("Slide Files found: ", length(slide_files)))
renderthis::to_pdf(lecture.slides.html)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/_site/content/Week06")
renderthis::to_pdf
# Load the required library
if (!requireNamespace("renderthis", quietly = TRUE)) {
install.packages("renderthis")
}
library(renderthis)
# List all '.slides.html' files in the '_site/slides/' directory
slide_files <- list.files(path = "_site/content/Week06/", pattern = "\\.slides\\.html$", recursive = TRUE, full.names = TRUE)
# Exclude 'index.slides.html'
slide_files <- slide_files[!grepl("index\\.slides\\.html$", slide_files)]
# Print for debugging
print(paste("Slide Files found: ", length(slide_files)))
# Check if any '.slides.html' files are found
if (length(slide_files) == 0) {
print("No '.slides.html' files found.")
} else {
# Loop through each '.slides.html' file and convert it to PDF
for (slide_path in slide_files) {
# Print for debugging
print(paste("Processing: ", slide_path))
# Generate the PDF file name (same name as the HTML file but with a .pdf extension)
path_sans_ext <- sub("\\.slides\\.html$", "", slide_path)
path_sans_int <- sub("\\_site\\/", "", path_sans_ext)
pdf_path <- paste0(path_sans_ext, ".pdf")
png_path <- paste0(path_sans_int, ".png")
# Set the 'complex' flag based on your requirements (TRUE or FALSE)
complex <- FALSE
# Convert the slide to PDF
renderthis::to_pdf(slide_path, to = pdf_path, complex_slides = complex)
# Print a message indicating the PDF has been generated
print(paste("PDF generated:", pdf_path))
# Produce Preview image as png
renderthis::to_png(slide_path, to = png_path, keep_intermediates = TRUE)
}
}
source("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/scripts/post_render.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/scripts/post_render.R")
# Load the required library
if (!requireNamespace("renderthis", quietly = TRUE)) {
install.packages("renderthis")
}
library(renderthis)
# List all '.slides.html' files in the '_site/slides/' directory
slide_files <- list.files(path = "~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/_site/content/Week06", pattern = "\\.slides\\.html$", recursive = TRUE, full.names = TRUE)
# Exclude 'index.slides.html'
slide_files <- slide_files[!grepl("index\\.slides\\.html$", slide_files)]
# Print for debugging
print(paste("Slide Files found: ", length(slide_files)))
# Check if any '.slides.html' files are found
if (length(slide_files) == 0) {
print("No '.slides.html' files found.")
} else {
# Loop through each '.slides.html' file and convert it to PDF
for (slide_path in slide_files) {
# Print for debugging
print(paste("Processing: ", slide_path))
# Generate the PDF file name (same name as the HTML file but with a .pdf extension)
path_sans_ext <- sub("\\.slides\\.html$", "", slide_path)
path_sans_int <- sub("\\_site\\/", "", path_sans_ext)
pdf_path <- paste0(path_sans_ext, ".pdf")
png_path <- paste0(path_sans_int, ".png")
# Set the 'complex' flag based on your requirements (TRUE or FALSE)
complex <- FALSE
# Convert the slide to PDF
renderthis::to_pdf(slide_path, to = pdf_path, complex_slides = complex)
# Print a message indicating the PDF has been generated
print(paste("PDF generated:", pdf_path))
# Produce Preview image as png
renderthis::to_png(slide_path, to = png_path, keep_intermediates = TRUE)
}
}
source("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/scripts/post_render.R")
renderthis::to_pdf(~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/_site/content/Week06/lab.slides.html)
renderthis::to_pdf("PS52007D_2023-4/_site/content/Week06/lab.slides.html")
renderthis::to_pdf("lab.slides.html")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/Week07")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content")
renv::rebuild()
renv::restore(confirm = FALSE)
install.packages(c("bslib", "cli", "DBI", "evaluate", "htmltools", "jsonlite", "knitr", "lifecycle", "rlang", "rmarkdown", "sass", "stringr", "tinytex", "vctrs", "xfun", "yaml"))
install.packages(c("DBI", "renv"), lib="/Users/gordonhome/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/renv/library/R-4.3/x86_64-apple-darwin20")
install.packages(c("DBI", "renv"), lib = "/Users/gordonhome/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/renv/library/R-4.3/x86_64-apple-darwin20")
install.packages("ggplot2")
install.packages("dbplyr")
install.packages("ggpubr")
install.packages("tidyverse")
install.packages("stringi")
install.packages("kableExtra")
install.packages("gt")
install.packages("kableExtra")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/Week13")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/Week13")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content")
install.packages("bookdown")
renv::restore(confirm = FALSE)
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("kableExtra")
install.packages("gt")
renv::status()
install.packages(yaml)
install.packages("yaml")
renv::status()
renv::repair()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/Week15")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/MiniDissWriting")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/LittleMonkeyiCloudHub/A-Teaching/PS52007D_2023-4/content/MiniDissWriting")
renv::repair()
renv::repair()
renv::repair()
install.packages("lme4")
renv::repair()
renv::repair()
