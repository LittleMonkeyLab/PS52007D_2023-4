---
title: revealplay
format: revealjs
---

## task: calculate a summary statistic

::: goal
Calculate the mean loan amount.
:::

## `arrow`

> `arrow` is software development platform for building high performance
> applications that process and transport large data sets

![](images/Screenshot - Firefox-19-09-000148.png)

# Experimental design<br> short stories {background-color="#006dae"}

Giesbrecht, Francis G. and Gumpertz, Marcia L. (2004) Planning,
Construction, and Statistical Analysis of Comparative Experiments.

Bailey, Rosemary (2008) Design of Comparative Experiments.

Lawson, John (2015) Design and Analysis of Experiments with R.

![](images/Screenshot - Firefox-19-09-000150.png)

# [STORY 1]{.story} [ðŸŒ± The folklore of fervent field experiments]{style="float:right;text-align:right;"} {background-color="#027eb6"}

------------------------------------------------------------------------

## [STORY 1]{.story} ðŸŒ± The folklore of fervent field experiments {auto-animate="true" auto-animate-easing="ease-in-out"}

::: columns
::: {.column width="37%"}
::: box
Consider a field experiment in agriculture where [plot]{.fragment
.highlight-red fragment-index="2"} are laid in out as [6 rows by 8
columns]{.fragment .highlight-red fragment-index="1"} (each also called
strip). There are [4 modes of seedbed preparation and 3 crop
varieties]{.fragment .highlight-blue fragment-index="3"} that are of the
interest to the researcher. The [mode of seedbed preparation is assigned
randomly to the whole columns]{.fragment .highlight-blue
fragment-index="4"}, and the [crop variety is assigned randomly to the
whole row]{.fragment .highlight-blue fragment-index="5"}. This
experimental design is called a **strip-plot design**.
:::
:::

::: {.column width="63%"}
::: {.fragment .fade-in}
::: {data-id="box1"}
#\| echo: true #\| eval: true #\| code-line-numbers:
"\|2\|3-5\|6-7\|8-9\|10\|11\|" library(edibble) df1 \<-
design("Strip-plot experiment") %\>% set_units(row = 6, col = 8, plot =
crossed_by(row, col)) %\>% set_trts(seedbed = 4, variety = 3) %\>%
allot_trts(seedbed \~ col, variety \~ row) %\>% assign_trts("random",
seed = 20220324) %\>% serve_table()

df1
:::
:::
:::
:::

------------------------------------------------------------------------

## Slide, `aquamarine` {background-color="aquamarine"}

## Slide, `#806040` {background-color="#806040"}

##  {background-color="aquamarine"}

(A slide with no title)

##  {background-color="black" background-image="https://placekitten.com/100/100" background-size="100px" background-repeat="repeat"}

(Another slide with no title)

## setting the scene

::: columns
::: {.column width="50%" style="text-align: center;"}
**Assumption 1:**

Teach authentic tools
:::

::: {.column width="50%" style="text-align: center;"}
**Assumption 2:**

Teach R as the authentic tool
:::
:::

![](images/Screenshot - Firefox-19-09-000152.png)

## takeaway

<br><br>

> The tidyverse provides an effective and efficient pathway for
> undergraduate students at all levels and majors to gain computational
> skills and thinking needed throughout the data science cycle.

> <hr>

> ::: aside
> Ã‡etinkaya-Rundel, M., Hardin, J., Baumer, B. S., McNamara, A., Horton,
> N. J., & Rundel, C. (2021). An educator's perspective of the
> tidyverse. arXiv preprint arXiv:2108.03510.
> [arxiv.org/abs/2108.03510](https://arxiv.org/abs/2108.03510)
> :::

## Columns

::: columns
::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::
:::

## Slide 1

-   incremental list, 1
-   incremental list, 2

## Slide 2

-   incremental list, 3
-   incremental list, 4

## Slide 1, incrementally

::: incremental
-   Eat spaghetti
-   Drink wine
:::

## Slide 2, non-incrementally

-   Eat spaghetti
-   Drink wine

## Slide 1, incrementally

-   Eat spaghetti
-   Drink wine

## Slide 2, non-incrementally

::: nonincremental
-   Eat spaghetti
-   Drink wine
:::

## Slide with a pause

content before the pause

. . .

content after the pause

## Slide Title

Slide content

::: footer
Custom footer text
:::

## Another Slide Title

::: footer
A different custom footer
:::

## Slide 1 {.smaller}

-   Bullet Point 1
-   Bullet Point 2
-   Bullet Point 3
-   Bullet Point 4
-   Bullet Point 5
-   Bullet Point 6
-   Bullet Point 7
-   Bullet Point 8
-   Bullet Point 9
-   Bullet Point 10
-   Bullet Point 11
-   Bullet Point 12
-   Bullet Point 13
-   Bullet Point 14
-   Bullet Point 15
-   Bullet Point 16

## Slide 2 {.scrollable}

-   Bullet Point 1
-   Bullet Point 2
-   Bullet Point 3
-   Bullet Point 4
-   Bullet Point 5
-   Bullet Point 6
-   Bullet Point 7
-   Bullet Point 8
-   Bullet Point 9
-   Bullet Point 10
-   Bullet Point 11
-   Bullet Point 12
-   Bullet Point 13
-   Bullet Point 14
-   Bullet Point 15
-   Bullet Point 16

## Slide with speaker notes

Slide content

::: notes
Speaker notes go here.
:::

## Title

::: panel-tabset
### Tab A

Content for `Tab A`

### Tab B

Content for `Tab B`
:::

## Title Slide

The main title slide is the first slide of the presentation, and its
content is generated based on a variety document options (title,
subtitle, date, author, institute, etc.).

### Custom Background

If you want to provide a custom background for the title slide, then do
the following:

1.  Use the `title-slide-attributes` key to provide background options.
2.  Within this key, specify any of the supported [slide background
    options](index.qmd#slide-backgrounds), but with `data-` prepended to
    them. For example:

For example:

``` yaml
---
title: My Slide Show
title-slide-attributes:
  data-background-image: /path/to/title_image.png
  data-background-size: contain
  data-background-opacity: "0.5"
---
```

### Custom Template

You can replace the default title slide entirely with your own template.
To do this, specify a `title-slide.html` [template
partial](/docs/journals/templates.qmd#template-partials). For example:

``` yaml
title: My Slide Show
format:
  revealjs:
    template-partials:
      - title-slide.html
```

Here is the source code for the [default title slide template
partial](https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/formats/revealjs/pandoc/title-slide.html).
Customize this template as required, then save the resutls to
`title-slide.html` alongside your presentation.

## Slide Transitions

Reveal supports a number of animated transition effects for both slide
changes and slide background changes. By default no transitions are
used, however you can enable them either globally or per-slide using the
options described below.

Here are the available transition types:

| Transition | Description                                                            |
|---------------|---------------------------------------------------------|
| `none`     | No transition (switch instantly)                                       |
| `fade`     | Cross fade                                                             |
| `slide`    | Slide horizontally                                                     |
| `convex`   | Slide at a convex angle                                                |
| `concave`  | Slide at a concave angle                                               |
| `zoom`     | Scale the incoming slide so it grows in from the center of the screen. |

Here's how you would set the global transition style for both slides and
backgrounds:

``` yaml
---
title: "Presentation"
format:
  revealjs:
    transition: slide
    background-transition: fade
---
```

You can also specify the `transition-speed` as `default`, `fast`, or
`slow`:

``` yaml
---
title: "Presentation"
format:
    navigation-mode: vertical
---

# Slide 1

## Slide 1.1

## Slide 1.2

# Slide 2

## Slide 2.1

## Slide 2.2
```

### Slide Controls

When you enable `vertical` or `grid` navigation, controls will appear to
provide a visual cue to where you are in the presentation (e.g. if there
are vertical slides below you'll see a down control).

By default these controls appear at the edges of the presentation, you
can position them in the bottom right corner using the `controls-layout`
option. You can also provide an extra visual cue to viewers that the
controls are available using the `controls-tutorial` option. For
example:

``` yaml
---
title: "Presentation"
format: 
  revealjs:
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
---
```

Note that using `controls-layout: bottom-right` isn't compatible with
including a `logo` (as the logo appears in the bottom right corner as
well).

You can also disable the controls entirely with `controls: false`.

::: callout-warning
While vertical slides do provide some additional flexibility over the
traditional linear model, they are in practice very confusing for end
users (mostly because they are so unexpected). Users will often skip the
vertical content because they simply don't know its there.

If your content benefits from vertical orientation (e.g. you have
optional drill-down content that you don't want in the main flow of the
presentation) by all means use the vertical mode. Just know that if you
distribute your slides to users they will very likely not end up viewing
any of the vertical content.
:::

## Touch Navigation

You can swipe to navigate through a presentation on any touch-enabled
device. Horizontal swipes change between horizontal slides, vertical
swipes change between vertical slides.

If you wish to disable this you can set the `touch` option to `false`:

``` yaml
---
title: "Presentation"
format:
  revealjs:
    touch: false
    controls: true
---
```

Note that we also enable `controls` at the same time (as users on phones
or tablets don't have access to a keyboard).

## Reveal Plugins

To use [Revealjs
plugins](https://github.com/hakimel/reveal.js/wiki/Plugins,-Tools-and-Hardware),
you need to package them into a directory with a config file
(`plugin.yml`). The config file lets Quarto know how to inject the
plugin into the presentation (e.g. what scripts and/or css files to
include, what the default configuration should be, etc.).

See the source code of the plugins that are built in to Quarto Reveal
for examples:

<https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/revealjs/plugins>

To use a plugin, just include a reference to its directory in the list
of `plugins`. For example:

``` yaml
---
title: "Presentation"
format:
  revealjs:
    revealjs-plugins:
      - myplugin
---
```

Note that many of the most popular Reveal plugins are already included
with the Quarto version of Reveal, so there is no need to include them
separately. Built in plugins include:

-   [Multiplex](https://github.com/reveal/multiplex)
-   [RevealMenu](https://github.com/denehyg/reveal.js-menu)
-   [RevealChalkboard](https://github.com/rajgoel/reveal.js-plugins/tree/master/chalkboard)
-   [PdfExport](https://github.com/McShelby/reveal-pdfexport)

### Example

Let's show an example with the
[fullscreen](https://rajgoel.github.io/reveal.js-demos/fullscreen-demo.html).
Here are the steps to bundle this plugin to use within your Quarto HTML
presentation:

1.  Create a folder with the name you want for the plugin, here we'll
    call it `fullscreen`.

2.  Download the plugin files into the created folder. Here the plugin
    only have a JS file called `plugin.js` that you can find [on the
    repo
    *rajgoel/reveal.js-plugins*](https://raw.githubusercontent.com/rajgoel/reveal.js-plugins/master/fullscreen/plugin.js).
    You can keep the name or rename it, e.g `fullscreen.js`.

3.  In that folder add a `plugin.yml` file, as in [Quarto Reveal
    examples](https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/revealjs/plugins).

    -   `name` is a mandatory field which should be the name of the JS
        function the JS plugin is defining. Open the JS script you
        downloaded to look for it.
    -   Other fields are for the resources to be used. In our example,
        only a JS script so we'll use `script`

    Our `plugin.yml` would be:

    ``` yaml
    name: RevealFullscreen
    script: [fullscreen.js]
    ```

4.  Now add the plugin reference into your document YAML header, using
    the path of the folder your created:

    ``` yaml
    format: 
     revealjs:
       revealjs-plugins:
         - fullscreen
    ```

5.  The custom plugin will be loaded in your presentation and you can
    use it. The plugin *fullscreen* documentation shows an example of
    adding a Map fullscreen in a slide by adding an attribute on the
    section, and using stretch on the content. This would translate to
    having this slide in the `.qmd` file:

    ``` markdown
    ## {fullscreen=true}

    <iframe class="stretch" data-src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d61206.89156051744!2d-151.77366863890407!3d-16.50433878928727!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sde!4v1467468929561"></iframe>
    ```

## Learning More

See these articles lo learn more about using Reveal:

-   [Reveal Basics](index.qmd) covers the basic mechanics of creating
    presentations.
-   [Presenting Slides](presenting.qmd) describes slide navigation,
    printing to PDF, drawing on slides using a chalkboard, and creating
    multiplex presentations.
-   [Reveal Themes](themes.qmd) talks about using and customizing
    existing themes as well as creating brand new themes.

## Overview

You can create [Revealjs](https://revealjs.com/) presentations using the
`revealjs` format. The best way to get a sense for the capabilities of
Revealjs is this [demo](demo/){target="_blank"} presentation:

<div>

```{=html}
<iframe class="slide-deck" src="demo/"></iframe>
```

</div>

If you prefer to view the demo in a standalone browser you can do that
[here](demo/){target="_blank"}. Check out the [source
code](https://github.com/quarto-dev/quarto-web/blob/main/docs/presentations/revealjs/demo/index.qmd)
for the demo to see how the slides were created.

See the Revealjs [format
reference](../../reference/formats/presentations/revealjs.qmd) for a
comprehensive overview of all options supported for Revealjs Content
Overflow
